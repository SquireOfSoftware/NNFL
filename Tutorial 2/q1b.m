% borrowed from example 3.10 with tutorial reference
clc;
clear;

x1 = [1, 1, 1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, 1]';
x2 = [-1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1]';
x3 = [1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1]';

d1 = [1, -1, -1]';
d2 = [-1, 1, -1]';
d3 = [-1, -1, 1]';

w = [-0.800139811595672,0.748518635388950,0.861304923039424,0.0757361985509298;0.225377979478551,-1.52554039390749,-0.145327858532290,0.707388252803991;-0.299629441918495,-0.175174073784897,1.01967517133565,-0.00605820701209064];
wBar = [0.637142423756603,0.651278840312062,0.363042423756603,0.113942423756603,0.340542423756603,-0.606742423756603,-0.857278840312062,0.515142423756603,-1.03815757624340,-0.847160711583772,-0.617097128139231,0.267242423756603,-0.490257576243397,0.420997128139230,-0.811539288416229,-0.609457576243397,-0.696578840312062;0.410926082107800,-0.960250061909823,0.438626082107800,0.526326082107800,-0.418073917892200,-1.01442608210780,-0.669349938090177,0.516326082107800,0.192526082107800,0.217476374396352,-0.0716474815860262,0.441526082107800,0.654826082107800,-0.536552518413974,-0.0875763743963518,-0.866473917892200,0.451950061909822;-0.132258630307475,-0.841301047138430,-0.170458630307475,0.939341369692525,0.463941369692525,0.0351586303074747,0.969401047138430,-0.170858630307475,-0.00675863030747472,-0.433498920466945,0.159743496364011,0.0335413696925253,-0.299958630307475,-0.887343496364011,0.764798920466945,-0.902458630307475,-0.243198952861570];

bias = -1;
steps = 3;
inputCounter = 1;

n = 0.8;

X = [x1, x2, x3];
X(17, :) = bias;

D = [d1, d2, d3];

classifications = zeros(3, 3);

for index = 1:steps
    % start feedforward
    activationVector1 = wBar * X(:, inputCounter);
    
    layer1 = arrayfun(@bipolarLogisticFunction, activationVector1);
    [v1Row, ~] = size(activationVector1);
    
    layer1(v1Row + 1, :) = bias;
    
    activationVector2 = w * layer1;
    
    layer2 = arrayfun(@discreteActivationFunction, activationVector2);
    
    % feedfoward has finished, store outputs
    classifications(:, inputCounter) = layer2;
    
    inputCounter = inputCounter + 1;
    
    [~, dCols] = size(D);
    
    if inputCounter > dCols
        inputCounter = 1;
    end
end

disp(classifications);

function output = bipolarLogisticFunction(v)
    output = (2 / (1 + exp(-v))) - 1;
end

function output = discreteActivationFunction(v)
    if (v > 0)
        output = 1;
    else
        output = -1;
    end
end